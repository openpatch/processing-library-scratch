<project name="Library" default="clean" basedir="../">


    <!--
            Properties for your project should be set and modified in the
            build.properties
    file (located in the same folder as this build.xml file).

            THIS FILE SHOULD NOT BE
    EDITED, unless you know what you are doing.
            If you have recommendations for
    improvements, please let Elie know
            at prisonerjohn@gmail.com
    -->


    <property file="./resources/build.properties" />

    <description>
        ${ant.description}
    </description>


    <property name="line"
        value="------------------------------------------------------------------------------------------------" />

    <condition property="is.normal">
        <equals arg1="${project.compile}" arg2="normal" />
    </condition>


    <!-- set the OS properties -->
    <condition property="is.mac">
        <os family="mac" />
    </condition>
    <condition property="is.windows">
        <os family="windows" />
    </condition>
    <condition property="is.unix">
        <os family="unix" />
    </condition>


    <property name="project.jar.name" value="${project.name}" />
    <property name="project.src" location="src" />
    <property name="project.tmp" location="tmp" />
    <property name="project.docs" location="docs" />
    <property name="project.data" location="data" />
    <property name="project.lib" location="lib" />
    <property name="project.libs" location="libs" />
    <property name="project.bin" location="bin" />
    <property name="project.bin.data" location="${project.bin}/data" />
    <property name="project.examples" location="examples/processing" />
    <property name="project.dist" location="distribution" />
    <property name="project.dist.version" location="distribution/${project.name}-${library.version}" />
    <property name="project.dist.latest" location="distribution/${project.name}-latest" />
    <property name="install.source" location="resources/README.md" />
    <property name="install.destination" location="${project.dist.version}/README.md" />
    <property name="libprops.source" location="resources/library.properties" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="./resources/code/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>


    <path id="classpath">
        <fileset dir="${classpath.local.location}" includes="${classpath.local.include}" />
        <fileset dir="${classpath.libraries.location}" includes="**/*.jar" />
        <fileset dir="${project.libs}" includes="**/*.jar" />
    </path>


    <!-- Create the time stamp -->
    <tstamp>
        <format property="date" pattern="MM/dd/yyyy" offset="0" unit="hour" />
    </tstamp>

    <target name="init">
        <echo>${line}
            Building the Processing Library ${project.name} ${library.version}
            ${line}
            src path ${project.src}
            bin path ${project.bin}
            classpath.local ${classpath.local.location}
            sketchbook ${sketchbook.location}
            java version ${java.target.version}
            ${line}
        </echo>


        <mkdir dir="${sketchbook.location}/libraries" />
        <mkdir dir="${project.bin}" />
        <mkdir dir="${project.libs}" />
        <mkdir dir="${project.libs}/windows-amd64" />
        <mkdir dir="${project.libs}/macosx-universal" />
        <mkdir dir="${project.libs}/linux-amd64" />
    </target>


    <target name="library.init" depends="init">
        <echo message="init library ..." />

        <echo message="download dependencies ..." />

        <get dest="${project.libs}">
            <url
                url="https://github.com/micycle1/processing-core-4/releases/download/4.0.1/original-core-4.0.1.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/jogamp/jogl/jogl-all/2.3.2/jogl-all-2.3.2.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/jogamp/gluegen/gluegen-rt/2.3.2/gluegen-rt-2.3.2.jar" />
            <url
                url="https://github.com/processing/processing-sound/releases/download/v2.3.1/sound.zip" />
            <url url="https://github.com/java-native/jssc/releases/download/v2.9.4/jssc-2.9.4.jar" />
            <url url="https://repo1.maven.org/maven2/org/processing/serial/3.3.7/serial-3.3.7.jar" />
        </get>

        <get dest="${project.libs}/linux-amd64">
            <url
                url="https://maven.scijava.org/content/repositories/public/org/jogamp/jogl/jogl-all-natives-linux-amd64/2.1.5/jogl-all-natives-linux-amd64-2.1.5.jar" />
            <url
                url="https://maven.scijava.org/content/repositories/public/org/jogamp/gluegen/gluegen-rt-natives-linux-amd64/2.1.5/gluegen-rt-natives-linux-amd64-2.1.5.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-controls/18.0.2/javafx-controls-18.0.2-linux.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/18.0.2/javafx-graphics-18.0.2-linux.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-base/18.0.2/javafx-base-18.0.2-linux.jar" />
        </get>

        <get dest="${project.libs}/windows-amd64">
            <url
                url="https://maven.scijava.org/content/repositories/public/org/jogamp/jogl/jogl-all-natives-windows-amd64/2.1.5/jogl-all-natives-windows-amd64-2.1.5.jar" />
            <url
                url="https://maven.scijava.org/content/repositories/public/org/jogamp/gluegen/gluegen-rt-natives-windows-amd64/2.1.5/gluegen-rt-natives-windows-amd64-2.1.5.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-controls/18.0.2/javafx-controls-18.0.2-win.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/18.0.2/javafx-graphics-18.0.2-win.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-base/18.0.2/javafx-base-18.0.2-win.jar" />
        </get>

        <get dest="${project.libs}/macosx-universal">
            <url
                url="https://maven.scijava.org/content/repositories/public/org/jogamp/jogl/jogl-all-natives-macosx-universal/2.1.5/jogl-all-natives-macosx-universal-2.1.5.jar" />
            <url
                url="https://maven.scijava.org/content/repositories/public/org/jogamp/gluegen/gluegen-rt-natives-macosx-universal/2.1.5/gluegen-rt-natives-macosx-universal-2.1.5.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-controls/18.0.2/javafx-controls-18.0.2-mac.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-graphics/18.0.2/javafx-graphics-18.0.2-mac.jar" />
            <url
                url="https://repo1.maven.org/maven2/org/openjfx/javafx-base/18.0.2/javafx-base-18.0.2-mac.jar" />
        </get>

        <echo message="extracting sound jars ..." />
        <unzip src="${project.libs}/sound.zip" dest="${project.libs}" overwrite="true" />
        <move todir="${project.libs}">
            <fileset dir="${project.libs}/sound/library">
                <include name="*.jar" />
            </fileset>
        </move>

        <echo message="deleting temp files ..." />
        <delete file="${project.libs}/sound.zip" />
        <delete dir="${project.libs}/sound" />
    </target>


    <target name="library.run" depends="library.init">
        <echo message="building library ..." />
        <antcall target="generate.structure">
            <param name="folder" value="library" />
        </antcall>
        <antcall target="generate.source" />
        <antcall target="compile" />
        <antcall target="generate.javadoc" />
        <antcall target="generate.jar">
            <param name="folder" value="library" />
        </antcall>
        <antcall target="generate.libprops" />
        <antcall target="copyToSketchbook">
            <param name="folder" value="libraries" />
        </antcall>
        <antcall target="generate.distribution" />
        <antcall target="generate.zip" />
        <delete dir="${project.tmp}" />
    </target>


    <target name="generate.libprops" if="is.normal">
        <property name="libprops.destination"
            location="${project.tmp}/${project.name}/library.properties" />
        <copy file="${libprops.source}" tofile="${libprops.destination}" />
        <antcall target="parse.file">
            <param name="file" value="${libprops.destination}" />
        </antcall>
    </target>

    <target name="generate.javadoc" if="is.normal">
        <!-- create the java reference of the Library -->
        <javadoc bottom="Scratch for Java by ${author.name}. ${library.copyright}"
            classpathref="classpath"
            destdir="${project.dist}/javadoc"
            verbose="false"
            sourcepath="${project.src}"
            doctitle="Javadocs: ${project.name}"
            public="true" version="false"
            windowtitle="Javadocs: ${project.name}">

            <link href="${javadoc.java.href}" />
            <link href="${javadoc.processing.href}" />
        </javadoc>
    </target>

    <target name="copyToSketchbook">
        <echo message="copying files to the ${folder} folder in your sketchbook." />
        <!-- copy the jar file to processing's sketchbook libraries folder -->
        <delete dir="${sketchbook.location}/${folder}/${project.name}" />
        <mkdir dir="${sketchbook.location}/${folder}/${project.name}" />
        <copy todir="${sketchbook.location}/${folder}/${project.name}">
            <fileset dir="${project.tmp}/${project.name}" />
        </copy>
        <delete
            file="${sketchbook.location}/${folder}/${project.name}/library/scratch-standalone-*.jar" />
    </target>


    <target name="compile">
        <javac srcdir="${project.tmp}/${project.name}/src" destdir="${project.bin}"
            source="${java.target.version}"
            target="${java.target.version}" includeantruntime="false">
            <classpath>
                <path refid="classpath" />
            </classpath>
            <compilerarg value="-Xlint" />
        </javac>
        <copy todir="${project.bin.data}">
            <fileset dir="${project.data}" excludes="README" />
        </copy>
    </target>

    <target name="generate.jar">
        <jar jarfile="${project.tmp}/${project.name}/${folder}/${project.jar.name}.jar"
            basedir="${project.bin}" />

        <jar jarfile="${project.tmp}/${project.name}/${folder}/${project.jar.name}-javadoc.jar"
        basedir="${project.dist}/javadoc" />

        <jar jarfile="${project.tmp}/${project.name}/${folder}/${project.jar.name}-sources.jar"
        basedir="${project.src}" />

        <jar
            jarfile="${project.tmp}/${project.name}/${folder}/${project.jar.name}-standalone-linux-amd64.jar"
            basedir="${project.bin}">
            <fileset dir="${project.dist}/javadoc" />
            <zipgroupfileset dir="${project.libs}" includes="*.jar" />
            <zipgroupfileset dir="${project.libs}/linux-amd64" includes="*.jar" />
            <manifest>
                <attribute name="Class-Path" value="${project.libs}" />
            </manifest>
        </jar>

        <jar
            jarfile="${project.tmp}/${project.name}/${folder}/${project.jar.name}-standalone-windows-amd64.jar"
            basedir="${project.bin}">
            <zipgroupfileset dir="${project.libs}" includes="*.jar" />
            <zipgroupfileset dir="${project.libs}/windows-amd64" includes="*.jar" />
            <manifest>
                <attribute name="Class-Path" value="${project.libs}" />
            </manifest>
        </jar>

        <jar
            jarfile="${project.tmp}/${project.name}/${folder}/${project.jar.name}-standalone-macosx-universal.jar"
            basedir="${project.bin}">
            <zipgroupfileset dir="${project.libs}" includes="*.jar" />
            <zipgroupfileset dir="${project.libs}/macosx-universal" includes="*.jar" />
            <manifest>
                <attribute name="Class-Path" value="${project.libs}" />
            </manifest>
        </jar>
    </target>


    <target name="generate.structure">
        <delete dir="${project.tmp}" />
        <mkdir dir="${project.tmp}" />
        <mkdir dir="${project.tmp}/${project.name}" />
        <mkdir dir="${project.tmp}/${project.name}/${folder}" />
        <mkdir dir="${project.tmp}/${project.name}/examples" />
        <mkdir dir="${project.tmp}/${project.name}/src" />
        <copy todir="${project.tmp}/${project.name}/examples">
            <fileset dir="${project.examples}">
                <exclude name="**/*README*" />
            </fileset>
        </copy>
        <copy todir="${project.tmp}/${project.name}/src">
            <fileset dir="${project.src}" />
        </copy>
        <copy todir="${project.tmp}/${project.name}/${folder}">
            <fileset dir="${project.lib}" excludes="README" />
        </copy>
    </target>


    <target name="generate.source" if="is.normal">
        <antcall target="generate.source.win" />
        <antcall target="generate.source.nix" />
    </target>


    <!-- These two targets are pretty much the same, except for the delimiter (can't find a better
    way of doing this) -->
    <target name="generate.source.win" if="is.windows">
        <echo message="generating source (windows) ..." />
        <path id="src.contents">
            <fileset dir="${project.tmp}/${project.name}/src" includes="**/*.java" />
        </path>
        <property name="src.list" refid="src.contents" />
        <foreach list="${src.list}" param="file" target="parse.file" delimiter=";" />
    </target>
    <target name="generate.source.nix" unless="is.windows">
        <echo message="generating source (mac/linux) ..." />
        <path id="src.contents">
            <fileset dir="${project.tmp}/${project.name}/src" includes="**/*.java" />
        </path>
        <property name="src.list" refid="src.contents" />
        <foreach list="${src.list}" param="file" target="parse.file" delimiter=":" />
    </target>


    <target name="generate.distribution" if="is.normal">
        <mkdir dir="${project.dist}" />
        <delete dir="${project.dist.version}" />
        <mkdir dir="${project.dist.version}" />
        <mkdir dir="${project.dist.version}/${project.name}" />
        <move file="${project.tmp}/${project.name}" toDir="${project.dist.version}" />
    </target>


    <!-- find and replace ##placeholder## keywords in a file -->
    <target name="parse.file">
        <echo message="${file}" />

        <replaceregexp file="${file}" match="##date##" replace="${date}" flags="g" />
        <replaceregexp file="${file}" match="##copyright##" replace="${library.copyright}" flags="g" />

        <replaceregexp file="${file}" match="##author##" replace="${author.name} ${author.url}"
            flags="g" />
        <replaceregexp file="${file}" match="##author.name##" replace="${author.name}" flags="g" />
        <replaceregexp file="${file}" match="##author.url##" replace="${author.url}" flags="g" />

        <replaceregexp file="${file}" match="##library.name##" replace="${project.prettyName}"
            flags="g" />
        <replaceregexp file="${file}" match="##project.name##" replace="${project.name}" flags="g" />

        <replaceregexp file="${file}" match="##library.version##" replace="${library.version}"
            flags="g" />
        <replaceregexp file="${file}" match="##library.prettyVersion##"
            replace="${library.prettyVersion}" flags="g" />

        <replaceregexp file="${file}" match="##compatible.minRevision##"
            replace="${compatible.minRevision}" flags="g" />
        <replaceregexp file="${file}" match="##compatible.maxRevision##"
            replace="${compatible.maxRevision}" flags="g" />

        <replaceregexp file="${file}" match="##library.url##" replace="${library.url}" flags="g" />
        <replaceregexp file="${file}" match="##library.categories##" replace="${library.categories}"
            flags="g" />
        <replaceregexp file="${file}" match="##library.sentence##" replace="${library.sentence}"
            flags="g" />
        <replaceregexp file="${file}" match="##library.paragraph##" replace="${library.paragraph}"
            flags="g" />
        <replaceregexp file="${file}" match="##library.keywords##" replace="${library.keywords}"
            flags="g" />
        <replaceregexp file="${file}" match="##library.dependencies##"
            replace="${library.dependencies}" flags="g" />

        <replaceregexp file="${file}" match="##source.host##" replace="${source.host}" flags="g" />
        <replaceregexp file="${file}" match="##source.url##" replace="${source.url}" flags="g" />
        <replaceregexp file="${file}" match="##source.repository##" replace="${source.repository}"
            flags="g" />

        <replaceregexp file="${file}" match="##tested.platform##" replace="${tested.platform}"
            flags="g" />
        <replaceregexp file="${file}" match="##tested.processingVersion##"
            replace="${tested.processingVersion}"
            flags="g" />
    </target>


    <target name="generate.zip" if="is.normal">
        <!-- zip the distribution of the Library -->

        <move todir="${project.dist.version}/tmp/${project.name}">
            <fileset dir="${project.dist.version}/${project.name}" />
        </move>

        <copy file="${project.dist.version}/tmp/${project.name}/library.properties"
            tofile="${project.dist}/${project.name}.txt" />
        <move file="${project.dist.version}/tmp/${project.name}/library/scratch-javadoc.jar"
            todir="${project.dist}" />
        <move file="${project.dist.version}/tmp/${project.name}/library/scratch-sources.jar"
            todir="${project.dist}" />

        <move file="${project.dist.version}/tmp/${project.name}/library/scratch-standalone-windows-amd64.jar"
            todir="${project.dist}" />
        <move file="${project.dist.version}/tmp/${project.name}/library/scratch-standalone-linux-amd64.jar"
            todir="${project.dist}" />
        <move file="${project.dist.version}/tmp/${project.name}/library/scratch-standalone-macosx-universal.jar"
            todir="${project.dist}" />

        <zip destfile="${project.dist.version}/${project.name}.zip"
            basedir="${project.dist.version}/tmp"
            excludes="**/.DS_Store,**/${project.name}-standalone-*.jar"
        />

        <move file="${project.dist.version}/${project.name}.zip" todir="${project.dist}" />
        <copy file="resources/index.html" todir="${project.dist}" />

        <delete dir="${project.dist.version}" />
    </target>


    <!-- parsing the examples folder -->
    <target name="processExamples">
        <dirset id="examples.contents" dir="${project.examples}" excludes="*/*" />
        <property name="examples.list" refid="examples.contents" />
        <foreach list="${examples.list}" target="addExamples" param="exampleDir" delimiter=";">
        </foreach>
    </target>


    <target name="clean" depends="library.run">
        <delete dir="${project.bin}" />
        <delete dir="${project.tmp}" />
        <echo>

            ${line}
            Name ${project.name}
            Version ${library.prettyVersion} (${library.version})
            Compiled ${project.compile}
            Sketchbook ${sketchbook.location}
            ${line}
            done, finished.
            ${line}
        </echo>
    </target>

</project>
